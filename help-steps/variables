#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

if [ ! "$whonix_build_no_unset_xtrace" = "true" ]; then
   set +x
fi
#set -x

#echo "INFO: Currently running script: $BASH_SOURCE"

## {{ Sanity Tests.

command -v logname >/dev/null
command -v whoami >/dev/null
command -v dirname >/dev/null
command -v basename >/dev/null
command -v awk >/dev/null
command -v grep >/dev/null

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

bash -n "$BASH_SOURCE"

## }}

user_name_detection() {
   ## Since the script runs as root, we can not use $USER or whoami (that would be set to root).
   if [ ! "$user_name" = "" ]; then
      return 0
   fi
   if [ ! "$SUDO_USER" = "" ]; then
      true "INFO $BASH_SOURCE: Setting user_name to SUDO_USER $SUDO_USER..."
      user_name="$SUDO_USER"
   fi
   if [ "$user_name" = "" ] || [ "$user_name" = "root" ]; then
      true "INFO $BASH_SOURCE: Trying to set user_name by using \`logname\`."
      user_name="$(logname)" || true
   fi
   if [ "$user_name" = "" ] || [ "$user_name" = "root" ]; then
      echo "INFO $BASH_SOURCE: SUDO_USER: $SUDO_USER"
      true "INFO $BASH_SOURCE: Trying to set user_name by using \`whoami\`."
      user_name="$(whoami)"
      echo "INFO $BASH_SOURCE: Set user_name to $user_name using whoami."
   fi
   if [ "$user_name" = "" ]; then
      error "Variable user_name is empty."
   fi
}

user_name_detection
export user_name

[ -n "$SUDO_OPTS" ] || SUDO_OPTS="--non-interactive -u $user_name"

[ -n "$HOMEVAR" ] || HOMEVAR="/home/$user_name"
export HOMEVAR
[ -n "$WHONIX_BINARY" ] || WHONIX_BINARY="$HOMEVAR/whonix_binary"
export WHONIX_BINARY

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
[ -n "$WHONIX_SOURCE_FOLDER" ] || WHONIX_SOURCE_FOLDER="$(dirname "$MYDIR")"
export WHONIX_SOURCE_FOLDER

[ -n "$whonix_parent_folder" ] || whonix_parent_folder="$(dirname "$WHONIX_SOURCE_FOLDER")"
[ -n "$whonix_dev_meta_files_folder" ] || whonix_dev_meta_files_folder="$WHONIX_SOURCE_FOLDER/packages/whonix-developer-meta-files"

[ -n "$WHONIX_SOURCE_PARENTDIR" ] || WHONIX_SOURCE_PARENTDIR="$(dirname "$WHONIX_SOURCE_FOLDER")"
export WHONIX_SOURCE_PARENTDIR

[ -n "$WHONIX_SOURCE_HELP_STEPS_FOLDER" ] || WHONIX_SOURCE_HELP_STEPS_FOLDER="$WHONIX_SOURCE_FOLDER/help-steps"
export WHONIX_SOURCE_HELP_STEPS_FOLDER

cd "$WHONIX_SOURCE_FOLDER"

[ -n "$whonix_aptgetop_file" ] || whonix_aptgetop_file="$WHONIX_BINARY/aptgetopt.conf"
export whonix_aptgetop_file
rm -f "$whonix_aptgetop_file"

aptgetopt_add() {
   APTGETOPT[${#APTGETOPT[@]}]="$1"
   APTGETOPT_ALT="$APTGETOPT_ALT $1"
}

aptgetopt_conf_add () {
   sudo $SUDO_OPTS mkdir --parents "$WHONIX_BINARY/"
   echo "$1" | sudo $SUDO_OPTS tee --append "$whonix_aptgetop_file" >/dev/null
}

## Avoiding "perl: warning: Setting locale failed." as suggested on
## https://wiki.ubuntu.com/DebootstrapChroot and
## https://lists.debian.org/debian-amd64/2005/08/msg00249.html.
#[ -n "$LANG" ] || LANG="C"
LANG="C"
export LANG

## Deterministic.
LC_ALL=C.UTF-8
TZ=UTC
export LC_ALL TZ

## Disable uwt while building Whonix,
## because it is not functional while building Whonix from source code.
echo 'INFO: Setting... export UWT_DEV_PASSTHROUGH="1"'
[ -n "$UWT_DEV_PASSTHROUGH" ] || UWT_DEV_PASSTHROUGH="1"
export UWT_DEV_PASSTHROUGH

## used by mmdebstrap
## do not export without thinking this through since also used by debhelper
SOURCE_DATE_EPOCH="$(dpkg-parsechangelog -STimestamp)"

[ -n "$DEBDEBUG" ] || DEBDEBUG="1"
export DEBDEBUG

[ -n "$tpo_downloader_debug" ] || tpo_downloader_debug="1"
export tpo_downloader_debug

if [ ! "$whonix_build_one_parsed" = "1" ]; then
   MINUS_X_SET="0"
   test -o xtrace || { MINUS_X_SET="$?" ; true; };
   if [ "$MINUS_X_SET" = "0" ]; then
      ## -x was set
      bash -n "$WHONIX_SOURCE_FOLDER/help-steps/parse-cmd"
      source "$WHONIX_SOURCE_FOLDER/help-steps/parse-cmd"
      whonix_build_one_parse_cmd "$@"
   else
      ## -x was not set
      set -x
      bash -n "$WHONIX_SOURCE_FOLDER/help-steps/parse-cmd"
      source "$WHONIX_SOURCE_FOLDER/help-steps/parse-cmd"
      whonix_build_one_parse_cmd "$@"
      set +x
   fi
   whonix_build_one_parsed="1"
   export whonix_build_one_parsed
fi

export whonix_build_sources_list_primary

if [ "$WHONIX_BUILD_FLAVOR" = "whonix-gateway-kde" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Gateway"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Gateway-KDE"
   [ -n "$VMRAM" ] || VMRAM="768"
   [ -n "$VRAM" ] || VRAM="16"
   [ -n "$WHONIX_BUILD_TYPE" ] || WHONIX_BUILD_TYPE="gateway"
   [ -n "$WHONIX_BUILD_DESKTOP" ] || WHONIX_BUILD_DESKTOP="KDE"
   [ -n "$install_package" ] || install_package="non-qubes-whonix-gateway-kde"
fi

if [ "$WHONIX_BUILD_FLAVOR" = "whonix-gateway-xfce" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Gateway"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Gateway-XFCE"
   [ -n "$VMRAM" ] || VMRAM="768"
   [ -n "$VRAM" ] || VRAM="16"
   [ -n "$WHONIX_BUILD_TYPE" ] || WHONIX_BUILD_TYPE="gateway"
   [ -n "$WHONIX_BUILD_DESKTOP" ] || WHONIX_BUILD_DESKTOP="XFCE"
   [ -n "$install_package" ] || install_package="non-qubes-whonix-gateway-xfce"
fi

if [ "$WHONIX_BUILD_FLAVOR" = "whonix-gateway-rpi" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Gateway"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Gateway-RPi"
   [ -n "$VMRAM" ] || VMRAM="768"
   [ -n "$VRAM" ] || VRAM="16"
   [ -n "$WHONIX_BUILD_TYPE" ] || WHONIX_BUILD_TYPE="gateway"
   [ -n "$WHONIX_BUILD_DESKTOP" ] || WHONIX_BUILD_DESKTOP="RPi"
   [ -n "$install_package" ] || install_package="whonix-gateway-rpi"
fi

if [ "$WHONIX_BUILD_FLAVOR" = "whonix-gateway-cli" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Gateway"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Gateway-CLI"
   [ -n "$VMRAM" ] || VMRAM="512"
   [ -n "$VRAM" ] || VRAM="16"
   [ -n "$WHONIX_BUILD_TYPE" ] || WHONIX_BUILD_TYPE="gateway"
   [ -n "$WHONIX_BUILD_DESKTOP" ] || WHONIX_BUILD_DESKTOP="CLI"
   [ -n "$install_package" ] || install_package="non-qubes-whonix-gateway-cli"
fi

if [ "$WHONIX_BUILD_FLAVOR" = "whonix-workstation-kde" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Workstation"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Workstation-KDE"
   [ -n "$VMRAM" ] || VMRAM="2048"
   [ -n "$VRAM" ] || VRAM="128"
   [ -n "$WHONIX_BUILD_TYPE" ] || WHONIX_BUILD_TYPE="workstation"
   [ -n "$WHONIX_BUILD_DESKTOP" ] || WHONIX_BUILD_DESKTOP="KDE"
   [ -n "$install_package" ] || install_package="non-qubes-whonix-workstation-kde"
fi

if [ "$WHONIX_BUILD_FLAVOR" = "whonix-workstation-xfce" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Workstation"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Workstation-XFCE"
   [ -n "$VMRAM" ] || VMRAM="2048"
   [ -n "$VRAM" ] || VRAM="128"
   [ -n "$WHONIX_BUILD_TYPE" ] || WHONIX_BUILD_TYPE="workstation"
   [ -n "$WHONIX_BUILD_DESKTOP" ] || WHONIX_BUILD_DESKTOP="XFCE"
   [ -n "$install_package" ] || install_package="non-qubes-whonix-workstation-xfce"
fi

if [ "$WHONIX_BUILD_FLAVOR" = "whonix-workstation-cli" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Workstation"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Workstation-CLI"
   [ -n "$VMRAM" ] || VMRAM="512"
   [ -n "$VRAM" ] || VRAM="16"
   [ -n "$WHONIX_BUILD_TYPE" ] || WHONIX_BUILD_TYPE="workstation"
   [ -n "$WHONIX_BUILD_DESKTOP" ] || WHONIX_BUILD_DESKTOP="CLI"
   [ -n "$install_package" ] || install_package="non-qubes-whonix-workstation-cli"
fi

if [ "$WHONIX_BUILD_FLAVOR" = "whonix-custom-workstation" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Workstation-CUSTOM"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Workstation-CUSTOM"
   [ -n "$VMRAM" ] || VMRAM="2048"
   [ -n "$VRAM" ] || VRAM="128"
   [ -n "$WHONIX_BUILD_TYPE" ] || WHONIX_BUILD_TYPE="custom-workstation"
   [ -n "$WHONIX_BUILD_DESKTOP" ] || WHONIX_BUILD_DESKTOP="CUSTOM"
   [ -n "$install_package" ] || install_package="none"
fi

if [ "$WHONIX_BUILD_FLAVOR" = "whonix-host-cli" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Host"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Host-CLI"
   [ -n "$VMRAM" ] || VMRAM="512"
   [ -n "$VRAM" ] || VRAM="16"
   [ -n "$WHONIX_BUILD_TYPE" ] || WHONIX_BUILD_TYPE="whonix-host"
   [ -n "$WHONIX_BUILD_DESKTOP" ] || WHONIX_BUILD_DESKTOP="CLI"
   error "${red}${bold}WHONIX_BUILD_FLAVOR $WHONIX_BUILD_FLAVOR is not implemented.${reset}"
fi

if [ "$WHONIX_BUILD_FLAVOR" = "whonix-host-xfce" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Host"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Host-XFCE"
   [ -n "$VMRAM" ] || VMRAM="2048"
   [ -n "$VRAM" ] || VRAM="128"
   [ -n "$WHONIX_BUILD_TYPE" ] || WHONIX_BUILD_TYPE="whonix-host"
   [ -n "$WHONIX_BUILD_DESKTOP" ] || WHONIX_BUILD_DESKTOP="XFCE"

   if [ "$install_package" = "" ]; then
      install_package="whonix-host-xfce"

      install_package+="-"
      if [ "$WHONIX_BUILD_QCOW2" = "true" ]; then
         install_package+="kvm"
      elif [ "$WHONIX_BUILD_ISO" = "true" ]; then
         ## TODO:
         ## '--flavor whonix-host-xfce --target iso' currently is hardcoded to KVM.
         install_package+="kvm"
      else
         ## This would break:
         ## sudo ./help-steps/mount-raw --target raw --build --flavor whonix-host-xfce --freedom false
         #error "${red}${bold}Only 'target --qcow2' is supported for WHONIX_BUILD_FLAVOR $WHONIX_BUILD_FLAVOR for now.${reset}"
         echo "${red}${bold}NOTE: Only 'target --qcow2' is supported for WHONIX_BUILD_FLAVOR $WHONIX_BUILD_FLAVOR for now.${reset}"
      fi

      install_package+="-"
      if [ "$build_freedom_only" = "true" ]; then
         install_package+="freedom"
      elif [ "$build_freedom_only" = "false" ]; then
         install_package+="nonfreedom"
      else
         error "${red}${bold}You need to add either '--freedom true' or '--freedom false'!${reset}"
      fi
   fi
fi

if [ "$WHONIX_BUILD_FLAVOR" = "kicksecure-cli" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Kicksecure"
   [ -n "$VMNAME" ] || VMNAME="Kicksecure-CLI"
   [ -n "$VMRAM" ] || VMRAM="512"
   [ -n "$VRAM" ] || VRAM="16"
   [ -n "$WHONIX_BUILD_TYPE" ] || WHONIX_BUILD_TYPE="kicksecure"
   [ -n "$WHONIX_BUILD_DESKTOP" ] || WHONIX_BUILD_DESKTOP="CLI"
   [ -n "$install_package" ] || install_package="kicksecure-cli-vm"
fi

if [ "$WHONIX_BUILD_FLAVOR" = "kicksecure-kde" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Kicksecure"
   [ -n "$VMNAME" ] || VMNAME="Kicksecure-KDE"
   [ -n "$VMRAM" ] || VMRAM="2048"
   [ -n "$VRAM" ] || VRAM="128"
   [ -n "$WHONIX_BUILD_TYPE" ] || WHONIX_BUILD_TYPE="kicksecure"
   [ -n "$WHONIX_BUILD_DESKTOP" ] || WHONIX_BUILD_DESKTOP="KDE"
   [ -n "$install_package" ] || install_package="kicksecure-kde-vm"
fi

if [ "$WHONIX_BUILD_FLAVOR" = "kicksecure-xfce" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Kicksecure"
   [ -n "$VMNAME" ] || VMNAME="Kicksecure-XFCE"
   [ -n "$VMRAM" ] || VMRAM="2048"
   [ -n "$VRAM" ] || VRAM="128"
   [ -n "$WHONIX_BUILD_TYPE" ] || WHONIX_BUILD_TYPE="kicksecure"
   [ -n "$WHONIX_BUILD_DESKTOP" ] || WHONIX_BUILD_DESKTOP="XFCE"
   [ -n "$install_package" ] || install_package="kicksecure-xfce-vm"
fi

## Read by anon-base-files postinst.
export WHONIX_BUILD_TYPE

export VMNAME VMRAM VRAM

## vmsize 100 GB does not matter because grml-debootstrap creates sparse files,
## i.e. only space, which gets actually filled up, will take disk space.
[ -n "$VMSIZE" ] || VMSIZE="100G"
export VMSIZE

## Disk identifier for grml-debootstrap.
## https://github.com/grml/grml-debootstrap/pull/28
[ -n "$DISK_IDENTIFIER" ] || DISK_IDENTIFIER='26ada0c0-1165-4098-884d-aafd2220c2c6'
export DISK_IDENTIFIER

if [ "$WHONIX_BUILD_INTERNALRUN" = "1" ]; then
   if [ "$VMNAME" = "" ]; then
      VMNAME="internal"
      export VMNAME
   fi
fi

if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
   if [ "$CHROOT_FOLDER" = "" ]; then
      CHROOT_FOLDER=""
   fi
else
   [ -n "$CHROOT_FOLDER" ] || CHROOT_FOLDER="$WHONIX_BINARY/${VMNAME}_image"
   ANON_BUILD_INSTALL_TO_ROOT="0"
   export ANON_BUILD_INSTALL_TO_ROOT
fi
export CHROOT_FOLDER

true "variables INFO: CHROOT_FOLDER: $CHROOT_FOLDER"

if [ "$VMNAME" = "unknown" ]; then
   true "variables ERROR: VMNAME is unknown. Please report this bug!"
   exit 1
fi

if [ "$WHONIX_BUILD_INTERNALRUN" = "1" ]; then
   echo "variables INFO: Internal run."
else
   true "variables INFO: VMNAME is $VMNAME"
fi

if [ "$VMNAME" = "" ]; then
   MSG="${red}${bold}variables ERROR: VMNAME is empty! Please report this bug!${reset}"
   echo "$MSG"
   error "$MSG"
fi

[ -n "$XZ_OPT" ] || XZ_OPT="--threads=8"
export XZ_OPT

if [ "$whonix_build_unsafe_io" = "true" ]; then
   eatmydata_install="true"
   aptgetopt_add "-o Dpkg::Options::=--force-unsafe-io"
   aptgetopt_conf_add "Dpkg::Options:: \"--force-unsafe-io\";"
   if command -v eatmydata >/dev/null 2>&1 ; then
      true "INFO: eatmydata installed, preloading."
      ## Thanks to:
      ## shitpoet@gmail.com
      ## http://shitpoet.tk/eat-all-my-data.html
      #if ! test -h /usr/lib/libeatmydata.so ; then
         #ln -s /usr/lib/x86_64-linux-gnu/libeatmydata.so /usr/lib/libeatmydata.so || true
      #fi
      if [ -z "$LD_PRELOAD" ]; then
         LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libeatmydata.so
      else
         LD_PRELOAD="$LD_PRELOAD":/usr/lib/x86_64-linux-gnu/libeatmydata.so
      fi
      export LD_PRELOAD
      SUDO_OPTS="$SUDO_OPTS LD_PRELOAD=$LD_PRELOAD"
   else
      true "INFO: eatmydata not yet installed, not yet preloading."
   fi
   sync() {
      true "$FUNCNAME: Not running $FUNCNAME, because using '--unsafe-io true'."
   }
fi

## use apt-cacher-ng by default
## required for --connection clearnet
## for build_sources apt-cacher-ng http://HTTPS///
[ -n "$REPO_PROXY" ] || REPO_PROXY="http://127.0.0.1:3142"

if [ -n "${REPO_PROXY}" ]; then
   ## apt parameters must be without quotes
   ## apt parameters must be without equals sign
   ## apt parameters must be without collon sign
   ## apt config file must be with quotes
   ## apt config file must be without equals sign
   ## apt config file must be trailign collon sign

   aptgetopt_add "-o Acquire::http::Proxy=${REPO_PROXY}"
   aptgetopt_conf_add "Acquire::http::Proxy \"${REPO_PROXY}\";"

   aptgetopt_add "-o Acquire::https::Proxy=${REPO_PROXY}"
   aptgetopt_conf_add "Acquire::https::Proxy \"${REPO_PROXY}\";"

   aptgetopt_add "-o Acquire::tor::Proxy=${REPO_PROXY}"
   aptgetopt_conf_add "Acquire::tor::Proxy \"${REPO_PROXY}\";"

   DEBOOTSTRAP_PREFIX+=" env http_proxy=${REPO_PROXY}"
   COWBUILDER_PREFIX+=" env http_proxy=${REPO_PROXY}"
fi

## Export COWBUILDER_PREFIX so it is available in make-helper.bsh.
export COWBUILDER_PREFIX

if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
   if [ "$CHROOT" = "" ]; then
      CHROOT=""
   fi
else
   [ -n "$CHROOT" ] || CHROOT="chroot $CHROOT_FOLDER"
fi

if [ "$no_git" = "1" ]; then
   [ -n "$git_bin" ] || git_bin="true"
else
   [ -n "$git_bin" ] || git_bin="git"
fi

[ -n "$whonix_build_grml_bin" ] || whonix_build_grml_bin="grml-debootstrap"

[ -n "$rsync_opts" ] || rsync_opts="\
   --perms \
   --chmod=uog+r \
   --times \
   --partial \
   --progress \
   --verbose \
"

[ -n "$whonix_build_auto_retry" ] || whonix_build_auto_retry="1"
[ -n "$whonix_build_wait_auto_retry" ] || whonix_build_wait_auto_retry="5"

## Sanity Test.
command -v "$git_bin" >/dev/null

[ -n "$DEB_INSTALL_FOLDER" ] || DEB_INSTALL_FOLDER="/mnt/initialdeb"
export DEB_INSTALL_FOLDER

[ -n "$EMPTY_DIR" ] || EMPTY_DIR="/tmp/empty"
export EMPTY_DIR

[ -n "$WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER" ] || WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER="/var/lib/whonix/sources_temp_list.d"
[ -n "$WHONIX_SOURCES_LIST_TEMP_BUILD_FILE" ] || WHONIX_SOURCES_LIST_TEMP_BUILD_FILE="$WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER/whonix_temp_initialdeb.list"

[ -n "$WHONIX_SOURCES_LIST_TEMP_INITIAL_DEB_SOURCES_LIST" ] || WHONIX_SOURCES_LIST_TEMP_INITIAL_DEB_SOURCES_LIST="$CHROOT_FOLDER/$WHONIX_SOURCES_LIST_TEMP_BUILD_FILE"

## {{{ whonix_build_on_operating_system

if [ "$whonix_build_on_operating_system_detect_skip" = "1" ]; then
   true "Probably run by prepare-build-machine script. lsb_release may not yet installed. Skipping setting whonix_build_on_operating_system."
else
   ## Let's find out on which host operating system the build script is running.
   [ -n "$whonix_build_on_operating_system" ] || whonix_build_on_operating_system="$(lsb_release --short --i)"
   ## Converting whonix_build_on_operating_system to lower case to make later if comparison easier.
   whonix_build_on_operating_system="${whonix_build_on_operating_system,,}"
   ## Example whonix_build_on_operating_system: debian
   ## Example whonix_build_on_operating_system: ubuntu
   ## XXX
   if [ "$whonix_build_on_operating_system" = "whonix" ]; then
      whonix_build_on_operating_system="debian"
   fi
fi

## }}}

## {{{ whonix_build_current_git_head

[ -n "$whonix_build_current_git_head" ] || whonix_build_current_git_head="$($git_bin rev-parse HEAD)"

#echo "whonix_build_current_git_head: $whonix_build_current_git_head"

## }}}

## {{{ anon_dist_build_version

## --always because travis-ci does not fetch tags.
temp="$($git_bin describe --always --abbrev=1000000000)"

## Examples temp:
## 10-13-g20e1b49ff27053784e3e9e163dfd4c98dced73f5
## 10.0.0.0.3-13-g20e1b49ff27053784e3e9e163dfd4c98dced73f5-developers-only

if [ "$anon_dist_build_version" = "" ]; then
   anon_dist_build_version="$temp"
   anon_dist_build_version="$(echo "$anon_dist_build_version" | sed "s|-developers-only||g")"
   anon_dist_build_version="$(echo "$anon_dist_build_version" | sed "s|-testers-only||g")"
   anon_dist_build_version="$(echo "$anon_dist_build_version" | sed "s|-stable||g")"
   echo "${cyan}${bold}INFO: Variable anon_dist_build_version was unset. Auto detected. Set to: ${anon_dist_build_version}${reset}"
else
   echo "${cyan}${bold}INFO: Variable anon_dist_build_version was already set to: ${anon_dist_build_version}${reset}"
fi

## Using `export`, so 70_log_build_version can read it.
export anon_dist_build_version

## Example anon_dist_build_version:
## 10.0.0.0.3-13-g20e1b49ff27053784e3e9e163dfd4c98dced73f5

## }}}

if [ "$WHONIX_BUILD_TYPE" = "kicksecure" ]; then
   [ -n "$whonix_unified_name" ] || whonix_unified_name="Kicksecure-${WHONIX_BUILD_DESKTOP}-${anon_dist_build_version}"
else
   [ -n "$whonix_unified_name" ] || whonix_unified_name="Whonix-${WHONIX_BUILD_DESKTOP}-${anon_dist_build_version}"
fi

[ -n "$binary_image_raw" ] || binary_image_raw="$WHONIX_BINARY/${VMNAME}-${anon_dist_build_version}.raw"

[ -n "$binary_image_qcow2" ] || binary_image_qcow2="$WHONIX_BINARY/${VMNAME}-${anon_dist_build_version}.qcow2"

[ -n "$binary_image_text" ] || binary_image_text="$WHONIX_BINARY/${VMNAME}-${anon_dist_build_version}.text"

[ -n "$binary_image_ova" ] || binary_image_ova="$WHONIX_BINARY/${whonix_unified_name}.ova"
[ -n "$binary_image_ova_signature" ] || binary_image_ova_signature="$WHONIX_BINARY/${whonix_unified_name}.ova.asc"
[ -n "$binary_image_ova_torrent" ] || binary_image_ova_torrent="$WHONIX_BINARY/${whonix_unified_name}.ova.torrent"
[ -n "$binary_image_ova_torrent_signature" ] || binary_image_ova_torrent_signature="$WHONIX_BINARY/${whonix_unified_name}.ova.torrent.asc"

[ -n "$binary_image_iso" ] || binary_image_iso="$WHONIX_BINARY/${VMNAME}-${anon_dist_build_version}.iso"
[ -n "$binary_image_iso_signature" ] || binary_image_iso_signature="$WHONIX_BINARY/${VMNAME}-${anon_dist_build_version}.iso.asc"
[ -n "$binary_image_iso_torrent" ] || binary_image_iso_torrent="$WHONIX_BINARY/${VMNAME}-${anon_dist_build_version}.torrent"
[ -n "$binary_image_iso_torrent_signature" ] || binary_image_iso_torrent_signature="$WHONIX_BINARY/${VMNAME}-${anon_dist_build_version}.torrent.asc"

[ -n "$libvirt_source_kvm_file" ] || libvirt_source_kvm_file="$WHONIX_SOURCE_FOLDER/packages/whonix-libvirt/usr/share/whonix-libvirt/xml/${SHORT_VMNAME}.xml"
[ -n "$libvirt_target_kvm_file" ] || libvirt_target_kvm_file="$WHONIX_BINARY/${VMNAME}-${anon_dist_build_version}.xml"

[ -n "$libvirt_source_network_file_external" ] || libvirt_source_network_file_external="$WHONIX_SOURCE_FOLDER/packages/whonix-libvirt/usr/share/whonix-libvirt/xml/Whonix-External.xml"
[ -n "$libvirt_target_network_file_external" ] || libvirt_target_network_file_external="$WHONIX_BINARY/Whonix_external_network-${anon_dist_build_version}.xml"

[ -n "$libvirt_source_network_file_internal" ] || libvirt_source_network_file_internal="$WHONIX_SOURCE_FOLDER/packages/whonix-libvirt/usr/share/whonix-libvirt/xml/Whonix-Internal.xml"
[ -n "$libvirt_target_network_file_internal" ] || libvirt_target_network_file_internal="$WHONIX_BINARY/Whonix_internal_network-${anon_dist_build_version}.xml"

[ -n "$libvirt_target_xz_archive" ] || libvirt_target_xz_archive="$WHONIX_BINARY/${whonix_unified_name}.libvirt.xz"
[ -n "$libvirt_target_xz_archive_signature" ] || libvirt_target_xz_archive_signature="$WHONIX_BINARY/${whonix_unified_name}.libvirt.xz.asc"
[ -n "$libvirt_target_xz_archive_torrent" ] || libvirt_target_xz_archive_torrent="$WHONIX_BINARY/${whonix_unified_name}.libvirt.xz.torrent"
[ -n "$libvirt_target_xz_archive_torrent_signature" ] || libvirt_target_xz_archive_torrent_signature="$WHONIX_BINARY/${whonix_unified_name}.libvirt.xz.torrent.asc"

[ -n "$sha_two_hundredth_fifty_six_hash_file" ] || sha_two_hundredth_fifty_six_hash_file="$WHONIX_BINARY/${whonix_unified_name}.sha256sums"
[ -n "$sha_two_hundredth_fifty_six_hash_file_signature" ] || sha_two_hundredth_fifty_six_hash_file_signature="$WHONIX_BINARY/${whonix_unified_name}.sha256sums.asc"

[ -n "$sha_five_hundredth_twelve_hash_file" ] || sha_five_hundredth_twelve_hash_file="$WHONIX_BINARY/${whonix_unified_name}.sha512sums"
[ -n "$sha_five_hundredth_twelve_hash_file_signature" ] || sha_five_hundredth_twelve_hash_file_signature="$WHONIX_BINARY/${whonix_unified_name}.sha512sums.asc"

[ -n "$copy_vms_into_raw_file_one" ] || copy_vms_into_raw_file_one="$WHONIX_BINARY/Whonix-Gateway-${anon_dist_build_version}.qcow2"
[ -n "$copy_vms_into_raw_file_two" ] || copy_vms_into_raw_file_two="$WHONIX_BINARY/Whonix-Workstation-${anon_dist_build_version}.qcow2"

## {{{ buildconfig.d

[ -n "$whonix_build_config_dirs" ] || whonix_build_config_dirs="$WHONIX_SOURCE_FOLDER/buildconfig.d /etc/whonix_buildconfig.d ../buildconfig.d"

whonix_build_source_config_dir() {
   true "${cyan}INFO: Checking if whonix_build_config_dir $whonix_build_config_dir exists...${reset}"
   if [ -d "$1" ]; then
      true "${cyan}INFO: Parsing $1...${reset}"
      shopt -s nullglob
      local i
      for i in "$1/"*".conf"; do
         bash -n "$i"
         source "$i"
      done
   else
      true "${cyan}INFO: Skipping $1 because it does not exist.${reset}"
   fi
}

for whonix_build_config_dir in $whonix_build_config_dirs; do
   whonix_build_source_config_dir "$whonix_build_config_dir"
done

if [ ! "$whonix_build_custom_config_dir" = "" ]; then
   whonix_build_source_config_dir "$whonix_build_custom_config_dir"
fi

if [ ! "$whonix_build_conf_file" = "" ]; then
   if [ -f "$whonix_build_conf_file" ]; then
      bash -n "$whonix_build_conf_file"
      source "$whonix_build_conf_file"
   fi
fi

## }}}

export make_use_lintian
export genmkfile_make_cmd
export make_use_cowbuilder
export make_cowbuilder_dist_folder
export make_use_debsign

[ -n "$gpg_bin" ] || gpg_bin="gpg"
#[ -n "$gpg_bin" ] || gpg_bin="qubes-gpg-client-wrapper"

[ -n "$signify_private_key" ] || signify_private_key="/home/$user_name/.signify/keyname.sec"
[ -n "$signify_public_key" ] || signify_public_key="/home/$user_name/.signify/keyname.pub"

## {{{ fallback variables for debchange (dch), dpkg-buildpackage and debuild

[ -n "$DEBFULLNAME" ] || DEBFULLNAME="Whonix auto generated local APT signing key"
export DEBFULLNAME

[ -n "$DEBEMAIL" ] || DEBEMAIL="whonix@local-signing.key"
export DEBEMAIL

[ -n "$WHONIX_BUILD_SIGN_LOCAL_REPOSITORY" ] || WHONIX_BUILD_SIGN_LOCAL_REPOSITORY=false

if [ "$WHONIX_BUILD_SIGN_LOCAL_REPOSITORY" = "true" ]; then
   if [ "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" = "" ]; then
      error_ "WHONIX_BUILD_SIGN_LOCAL_REPOSITORY is true, but WHONIX_LOCAL_SIGNING_KEY_FOLDER is empty!"
   else
      [ -n "$WHONIX_BUILD_REPREPRO_SIGNING_OPTIONS" ] || WHONIX_BUILD_REPREPRO_SIGNING_OPTIONS="--gnupghome $WHONIX_LOCAL_SIGNING_KEY_FOLDER"
   fi
fi

if [ "$WHONIX_BUILD_SIGN_LOCAL_REPOSITORY" = "true" ]; then
   ## For whatever it may be worth.
   ## https://forums.whonix.org/t/end-to-end-signed-debs-debsign-debsig-and-dpkg-sig
   [ -n "$make_use_debsign" ] || make_use_debsign="true"
else
   ## For the local repository, no signatures are required.
   [ -n "$make_use_debsign" ] || make_use_debsign="false"
fi

## }}}

## {{{ apt repository variables

[ -n "$WHONIX_BUILD_APT_CODENAME" ] || WHONIX_BUILD_APT_CODENAME="local"
export WHONIX_BUILD_APT_CODENAME

## }}}

## {{{ reprepro variables

set_WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS() {
   if [ "$reprepro_codename" = "" ]; then
      reprepro_codename="$WHONIX_BUILD_APT_CODENAME"
   fi

   if [ "$reprepro_codename" = "local" ]; then
      temp="aptrepo_local"
   else
      temp="aptrepo_remote"
   fi

   [ -n "$WHONIX_APT_REPOSITORY_FOLDER" ] || WHONIX_APT_REPOSITORY_FOLDER="$WHONIX_BINARY/$temp"
   export WHONIX_APT_REPOSITORY_FOLDER

   [ -n "$WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS" ] || \
      WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS="\
         --basedir $WHONIX_SOURCE_FOLDER/$temp \
         --outdir $WHONIX_BINARY/$temp \
         --dbdir $WHONIX_BINARY/$temp/db \
         --logdir $WHONIX_BINARY/$temp/log"
   export WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS
}

## }}}

## {{{ BUILD_TARGET_ARCH

## Default architecture.
## Using export, so it can be read by chroot-post.d scripts.
[ -n "$BUILD_TARGET_ARCH" ] || BUILD_TARGET_ARCH="amd64"
export BUILD_TARGET_ARCH

## }}}

[ -n "$host_architecture" ] || host_architecture="$(dpkg --print-architecture)"
export host_architecture

[ -n "$make_cross_build_platform_list" ] || make_cross_build_platform_list="$BUILD_TARGET_ARCH"
#[ -n "$make_cross_build_platform_list" ] || make_cross_build_platform_list="i386 amd64"
## All architectures currently provided by deb.torproject.org at time of writing.
#[ -n "$make_cross_build_platform_list" ] || make_cross_build_platform_list="armel armhf i386 amd64 arm64"
export make_cross_build_platform_list

[ -n "$whonix_build_file_system" ] || whonix_build_file_system="ext4"

[ -n "$whonix_build_hostname" ] || whonix_build_hostname="host"

whonix_build_debopt+=" --verbose "

whonix_build_debopt+=" --include="
for grml_package in $(grep --invert-match "#" "$WHONIX_SOURCE_FOLDER/grml_packages") ; do
   if [ "locales" = "$grml_package" ]; then
      ## XXX: Workaround for:
      ## https://github.com/grml/grml-debootstrap/issues/48
      continue
   fi
   whonix_build_debopt+="$grml_package"
   whonix_build_debopt+=","
done
## Remove trailing ','.
whonix_build_debopt="${whonix_build_debopt::-1}"

## cowbuilder (which internally uses pbuilder).
whonix_build_pbuilder_chroot_script="$WHONIX_SOURCE_HELP_STEPS_FOLDER/pbuilder-chroot-script"

whonix_build_pbuilder_config_name="pbuilder.conf"
whonix_build_pbuilder_config_file="$WHONIX_BINARY/$whonix_build_pbuilder_config_name"
export whonix_build_pbuilder_config_name
## export so it can be read by genmkfile
export whonix_build_pbuilder_config_file

make_cowbuilder_dist_folder="$WHONIX_BINARY/genmkfile-packages-result"

rm --force "$whonix_build_pbuilder_config_file"
sudo $SUDO_OPTS mkdir --parents "$WHONIX_BINARY/"
sudo $SUDO_OPTS mkdir --parents "$make_cowbuilder_dist_folder"

echo "\
## This is an auto generated file.
## Auto generated by $WHONIX_SOURCE_HELP_STEPS_FOLDER/$BASH_SOURCE.
## Edits will be lost!

## Debugging.
#set -x

APTGETOPT[\${#APTGETOPT[@]}]=\"${APTGETOPT[@]}\"

APTGETOPT[\${#APTGETOPT[@]}]=\"-o Acquire::BlockDotOnion=false\"

export whonix_aptgetop_file

## making pbuilder /usr/lib/pbuilder/pbuilder-createbuildenv work with mmdebstrap.
## so it can be read by help-steps/pbuilder-debootstrap-command-filter
export BUILDPLACE

## Debugging.
true \"APTGETOPT: \${APTGETOPT[@]}\"
true \"BUILDPLACE: \$BUILDPLACE\"
true \"whonix_aptgetop_file: \$whonix_aptgetop_file\"

APTCACHEHARDLINK=no

## E: Cross building is possible only with the APT dependency resolver
PBUILDERSATISFYDEPENDSCMD=/usr/lib/pbuilder/pbuilder-satisfydepends-apt

## End of $whonix_build_pbuilder_config_file.
" | \
   sudo $SUDO_OPTS tee "$whonix_build_pbuilder_config_file" >/dev/null

#sudo $SUDO_OPTS cat "$whonix_build_pbuilder_config_file"

## Cannot export bash array.
export APTGETOPT

export APTGETOPT_ALT

## It depends on the order in which tb-updater is installed if
## update-torbrowser should or should not use temporarily reset
## anon-ws-dnf-conf.
tb_disable_anon_ws_dnf_conf=false
export tb_disable_anon_ws_dnf_conf

## {{{ SKIP_SCRIPTS

## Would be nicer to have this in the 'pre' script, but the 'variables' script
## runs after 'pre' to provide pretty color functions.
own_filename="$(basename "$0")"
for skip_script in $SKIP_SCRIPTS; do
   if [ "$own_filename" = "$skip_script" ]; then
      unset skip_script
      echo "${bold}${green}INFO: Skipping $own_filename, because SKIP_SCRIPTS includes it. ${reset}"
      exit 0
   fi
done
unset skip_script

## }}}

set -x

true "${bold}INFO: Currently running script: $0 "$@"${reset}"
true "INFO: LD_PRELOAD: $LD_PRELOAD"
