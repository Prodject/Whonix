#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

parse_cmd_target_error() {
   echo "${red}${bold}ERROR: --target must be either virtualbox, qcow2, iso, raw or root and can be used multiple times.${reset}"
   exit 1
}

parse_cmd_flavor_error() {
   echo "${red}${bold}You must add either:
--flavor whonix-gateway-kde
--flavor whonix-gateway-xfce
--flavor whonix-gateway-rpi
--flavor whonix-gateway-cli
--flavor whonix-workstation-kde
--flavor whonix-workstation-xfce
--flavor whonix-workstation-cli
--flavor whonix-custom-workstation
--flavor whonix-host-xfce
--flavor whonix-host-cli
--flavor kicksecure-kde
--flavor kicksecure-cli
--flavor kicksecure-xfce
${reset}"
   exit 1
}

whonix_build_one_script_help() {
   true "
help-steps/whonix_build_one script

Syntax:
help-steps/whonix_build_one --flavor flavor --target target

creates separate build folder
$HOMEVAR/whonix_binary

For verbose documentation on build configuration parameters please have a
look at the full build documentation.

FLAGS:
--build
Build Whonix.

--clean
Deletes build products (.raw, .ova and VirtualBox VM's).

--flavor whonix-gateway-kde|whonix-gateway-xfce|whonix-gateway-rpi|whonix-gateway-cli|whonix-workstation-kde|whonix-workstation-xfce|whonix-workstation-cli|whonix-custom-workstation|whonix-host-cli|whonix-host-xfce|kicksecure-cli|kicksecure-kde|kicksecure-xfce
whonix-gateway-kde: Builds Whonix-Gateway KDE.
whonix-gateway-xfce: Builds Whonix-Gateway XFCE.
whonix-gateway-rpi: Builds Whonix-Gateway CLI for the RPi 3.
whonix-gateway-cli: Builds a Whonix-Gateway CLI.
whonix-workstation-kde: Builds Whonix-Workstation KDE.
whonix-workstation-xfce: Builds Whonix-Workstation XFCE.
whonix-workstation-cli: Builds Whonix-Workstation CLI.
whonix-custom-workstation: Builds Whonix-Custom-Workstation.
whonix-host-cli: Builds Whonix-Host CLI
whonix-host-xfce: Builds Whonix-Host XFCE
kicksecure-cli: Builds Kicksecure CLI
kicksecure-kde: Builds Kicksecure KDE
kicksecure-xfce: Builds Kicksecure XFCE

--target virtualbox|qcow2|raw|root
virtualbox: Use this to build VirtualBox .ovas.
qcow2: Use this to build qcow2 images.
raw: Use this to build raw images.
iso: Use this to build iso images.
root: Use this for Whonix with physical or install to root installations.

vmram, vram, vmsize examples.
--vmram 128
--vram 12
--vmsize 200G

--freshness frozen|current
frozen: Use frozen sources.
current: Use current sources.

--connection clearnet|onion
clearnet: use clearnet apt sources
onion: use onion apt sources

--repo true|false
false: Default. Will ${under}not${eunder} enable remote repository.
true: ${under}enable${eunder} remote repository.

WHONIX_APT_REPOSITORY_OPTS
Whonix APT Repository.
Disabled by default.
WHONIX_APT_REPOSITORY_OPTS examples:
WHONIX_APT_REPOSITORY_OPTS='--enable --repository stable'
WHONIX_APT_REPOSITORY_OPTS='--enable --repository testers'
WHONIX_APT_REPOSITORY_OPTS='--enable --repository developers'
WHONIX_APT_REPOSITORY_OPTS='--enable --codename jessie'

--remote-derivative-packages true|false
false: Default. Will ${under}not${eunder} remote derivative packages.
true: ${under}use${eunder} remote derivative packages.

--release buster|xenial|bionic
Unsupported.

--report true|false
true
false: Default. Skip.
(Related to Verifiable Builds.)

--verifiable true|false
true
false: Skip deletion of non-determinstic files in the cleanup chroot script.
       (These files are later automatically re-created by First Run Initializer.)

--sanity-tests true|false
true
false: Skip chroot script sanity tests.

--retry-max 1|0|2|[...]
attempts

--retry-wait 5|1|2|[...]
Seconds between attempts.

--retry-before script
--retry-after script
Dispatch command or script.

--allow-uncommitted false|true
false: Break when uncommitted changes are found. Default.
true: Do not use unless you know what you are doing.

--allow-untagged false|true
false: Break when build from non-tag. Default.
true: Do not use unless you know what you are doing.

--arch
Only of interest for VM builds. Not for installations to root.
i386: less tested.
amd64: default, best tested.
kfreebsd-i386: entirely untested and most likely needs work.
kfreebsd-amd64: entirely untested and most likely needs work.

--kernel <Quoted space delimited list of packages.>
Only of interest for VM builds. Not for installations to root.
Defaults to linux-image-amd64.
none: Do not install kernel packages.
linux-image-686
linux-image-686-pae
linux-image-amd64
Possibly others. (Unmaintained!)

--headers <Quoted space delimited list of packages.>
Only of interest for VM builds. Not for installations to root.
Defaults to linux-headers-amd64.
none: Do not install kernel header packages.
linux-headers-686
linux-headers-686-pae
linux-headers-amd64
Possibly others. (Unmaintained!)

--confdir /path/to/config/dir
Will get sourced after
\$WHONIX_SOURCE_FOLDER/buildconfig.d /etc/whonix_buildconfig.d ../buildconfig.d
Files need to have the '.conf' file extension.
and before --conffile.

--conffile /path/to/config/file
Will get sourced after all other files.

--grmlbin /path/to/grml-debootstrap
Defaults to grml-debootstrap.

--tb none|closed|open
none: Do not install Tor Browser.
closed: Fail closed if Tor Browser cannot be installed.
open: Fail open if Tor Browser cannot and installed.
Defaults to closed.
Requires the tb-updater package being installed. Be careful if you modify
the default package selection as well.

--unsafe-io false|true
false: No unsafe io.
true: Use unsafe io, '-o Dpkg::Options::=--force-unsafe-io', eatmydata and ignore 'sync'.
Defaults to false.

--freedom false|true
false: impure build containing nonfreedom software, see https://www.whonix.org/wiki/Dev/nonfree
true: pure build only containing Freedom Software.
Default: No default. Required for Whonix-Host builds.
Not required for Whonix VM builds since always pure build only containing Freedom Software.
"
}

whonix_build_one_parse_cmd() {
   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   if [ ! "$WHONIX_BUILD_INTERNALRUN" = "1" ]; then
      if [ "$*" = "" ]; then
         error "${red}${bold}no option chosen. Use --help.${reset}"
      fi
   fi

   local build_machines_counter="0"
   local build_target_counter="0"

   ## Using export, so scripts run by run-parts (run by whonix_build) can read
   ## these variables.

   while :
   do
       case $1 in
           -h | --help | -\?)
               whonix_build_one_script_help
               exit 0
               ;;
           --flavor)
               true "${cyan}INFO: --flavor $2 chosen.${reset}"
               WHONIX_BUILD_FLAVOR="$2"
               export WHONIX_BUILD_FLAVOR
               if [ "$WHONIX_BUILD_FLAVOR" = "whonix-gateway-kde" ]; then
                  build_machines_counter="$(( $build_machines_counter + 1 ))"
               elif [ "$WHONIX_BUILD_FLAVOR" = "whonix-gateway-xfce" ]; then
                  build_machines_counter="$(( $build_machines_counter + 1 ))"
               elif [ "$WHONIX_BUILD_FLAVOR" = "whonix-gateway-rpi" ]; then
                  build_machines_counter="$(( $build_machines_counter + 1 ))"
               elif [ "$WHONIX_BUILD_FLAVOR" = "whonix-gateway-cli" ]; then
                  build_machines_counter="$(( $build_machines_counter + 1 ))"
               elif [ "$WHONIX_BUILD_FLAVOR" = "whonix-workstation-kde" ]; then
                  build_machines_counter="$(( $build_machines_counter + 1 ))"
               elif [ "$WHONIX_BUILD_FLAVOR" = "whonix-workstation-xfce" ]; then
                  build_machines_counter="$(( $build_machines_counter + 1 ))"
               elif [ "$WHONIX_BUILD_FLAVOR" = "whonix-workstation-cli" ]; then
                  build_machines_counter="$(( $build_machines_counter + 1 ))"
               elif [ "$WHONIX_BUILD_FLAVOR" = "whonix-custom-workstation" ]; then
                  build_machines_counter="$(( $build_machines_counter + 1 ))"
               elif [ "$WHONIX_BUILD_FLAVOR" = "whonix-host-cli" ]; then
                  build_machines_counter="$(( $build_machines_counter + 1 ))"
               elif [ "$WHONIX_BUILD_FLAVOR" = "whonix-host-xfce" ]; then
                  build_machines_counter="$(( $build_machines_counter + 1 ))"
               elif [ "$WHONIX_BUILD_FLAVOR" = "kicksecure-cli" ]; then
                  build_machines_counter="$(( $build_machines_counter + 1 ))"
               elif [ "$WHONIX_BUILD_FLAVOR" = "kicksecure-kde" ]; then
                  build_machines_counter="$(( $build_machines_counter + 1 ))"
               elif [ "$WHONIX_BUILD_FLAVOR" = "kicksecure-xfce" ]; then
                  build_machines_counter="$(( $build_machines_counter + 1 ))"
               else
                  parse_cmd_flavor_error
               fi
               shift 2
               ;;
           --target)
               true "${cyan}INFO: --target $2 chosen.${reset}"
               if [ "$2" = "virtualbox" ]; then
                  build_target_counter="$(( $build_target_counter + 1 ))"
                  export WHONIX_BUILD_VIRTUALBOX="true"
               elif [ "$2" = "root" ]; then
                  build_target_counter="$(( $build_target_counter + 1 ))"
                  export ANON_BUILD_INSTALL_TO_ROOT="1"
               elif [ "$2" = "qcow2" ]; then
                  build_target_counter="$(( $build_target_counter + 1 ))"
                  export WHONIX_BUILD_QCOW2="true"
               elif [ "$2" = "raw" ]; then
                  build_target_counter="$(( $build_target_counter + 1 ))"
                  export WHONIX_BUILD_RAW="true"
               elif [ "$2" = "iso" ]; then
                  build_target_counter="$(( $build_target_counter + 1 ))"
                  export WHONIX_BUILD_ISO="true"
               else
                  parse_cmd_target_error
               fi
               shift 2
               ;;
           --fast)
               true "${cyan}INFO: --fast $2 chosen.${reset}"
               if [ "$2" = "1" ]; then
                  export WHONIX_BUILD_FAST1="1"
               elif [ "$2" = "2" ]; then
                  export WHONIX_BUILD_FAST1="1"
                  export WHONIX_BUILD_FAST2="1"
               else
                  echo "${red}${bold}ERROR: supported options for --fast are '1' and '2'.${reset}"
                  exit 1
               fi
               shift 2
               ;;
           -c  | --clean)
               export WHONIX_BUILD_CLEAN="1"
               shift
               ;;
           -b  | --build)
               export WHONIX_BUILD_BUILD="1"
               shift
               ;;
           -i  | --internalrun)
               export WHONIX_BUILD_INTERNALRUN="1"
               build_machines_counter="$(( $build_machines_counter + 1 ))"
               shift
               ;;
           --vmram)
               export VMRAM="$2"
               shift 2
               if [ "$VMRAM" = "" ]; then
                  echo "${red}${bold}ERROR: You forgot to specify how much MB to use for --vmram.${reset}"
                  exit 1
               fi
               ;;
           --vram)
               export VRAM="$2"
               shift 2
               if [ "$VRAM" = "" ]; then
                  echo "${red}${bold}ERROR: You forgot to specify how much MB to use for --vram.${reset}"
                  exit 1
               fi
               ;;
           --vmsize)
               export VMSIZE="$2"
               shift 2
               if [ "$VMSIZE" = "" ]; then
                  echo "${red}${bold}ERROR: You forgot to specify how much GB to use for --vmsize.${reset}"
                  exit 1
               fi
               ;;
           --freshness)
               if [ "$2" = "frozen" ]; then
                  true "${red}ERROR: Using frozen sources currently not implement!${reset}"
                  exit 1
               elif [ "$2" = "current" ]; then
                  ## default
                  true "${cyan}INFO: Using current sources.${reset}"
               else
                  echo "${red}${bold}ERROR: supported options for --freshness are 'frozen' or 'current'.${reset}"
                  exit 1
               fi
               shift 2
               ;;
           --connection)
               if [ "$2" = "clearnet" ]; then
                  true "${cyan}INFO: Using clearnet apt sources.${reset}"
                  whonix_build_sources_clearnet_or_onion="clearnet"
               elif [ "$2" = "onion" ]; then
                  true "${cyan}INFO: Using onion apt sources.${reset}"
                  whonix_build_sources_clearnet_or_onion="onion"
                  ## tb-updater
                  ## https://phabricator.whonix.org/T678
                  tb_onion=true
               else
                  echo "${red}${bold}ERROR: supported options for --connection are 'clearnet' or 'onion'.${reset}"
                  exit 1
               fi
               export tb_onion
               export whonix_build_sources_clearnet_or_onion
               shift 2
               ;;
           --release)
               if [ "$2" = "" ]; then
                  echo "${red}${bold}ERROR: --release must not be empty.${reset}"
                  exit 1
               else
                  export BUILD_RELEASE="$2"
                  true "${cyan}BUILD_RELEASE set to $BUILD_RELEASE.${reset}"
               fi
               shift 2
               ;;
           ## TODO
           --testing-frozen-sources)
               export whonix_build_sources_list_primary="build_sources/debian_testing_frozen.list"
               shift
               ;;
           --arch)
               if [ "$2" = "" ]; then
                  echo "${red}${bold}ERROR: --arch must not be empty.${reset}"
                  exit 1
               else
                  export BUILD_TARGET_ARCH="$2"
                  true "${cyan}BUILD_TARGET_ARCH set to $BUILD_TARGET_ARCH.${reset}"
               fi
               shift 2
               ;;
           --kernel)
               if [ "$2" = "" ]; then
                  echo "${red}${bold}ERROR: --kernel must not be empty.${reset}"
                  exit 1
               elif [ "$2" = "none" ]; then
                  export BUILD_KERNEL_PKGS="none"
                  true "${cyan}BUILD_KERNEL_PKGS set to $BUILD_KERNEL_PKGS.${reset}"
               else
                  export BUILD_KERNEL_PKGS="$BUILD_KERNEL_PKGS $2"
                  true "${cyan}BUILD_KERNEL_PKGS set to $BUILD_KERNEL_PKGS.${reset}"
               fi
               shift 2
               ;;
           --headers)
               if [ "$2" = "" ]; then
                  echo "${red}${bold}ERROR: --headers must not be empty.${reset}"
                  exit 1
               elif [ "$2" = "none" ]; then
                  export BUILD_HEADER_PKGS="none"
                  true "${cyan}BUILD_HEADER_PKGS set to $BUILD_HEADER_PKGS.${reset}"
               else
                  export BUILD_HEADER_PKGS="$BUILD_HEADER_PKGS $2"
                  true "${cyan}BUILD_HEADER_PKGS set to $BUILD_HEADER_PKGS.${reset}"
               fi
               shift 2
               ;;
           --report)
               if [ "$2" = "true" ]; then
                  true "${cyan}INFO: Full report.${reset}"
                  export whonix_build_script_create_report="true"
               elif [ "$2" = "false" ]; then
                  true "${cyan}INFO: No report.${reset}"
                  export whonix_build_script_create_report="false"
               else
                  echo "${red}${bold}ERROR: supported options for --report are 'true' or 'false'.${reset}"
                  exit 1
               fi
               shift 2
               ;;
           --verifiable)
               if [ "$2" = "true" ]; then
                  true "${cyan}INFO: Building verifiable.${reset}"
                  export whonix_build_script_verifiable="true"
               elif [ "$2" = "false" ]; then
                  true "${cyan}INFO: Not building verifiable.${reset}"
                  export whonix_build_script_verifiable="false"
               else
                  echo "${red}${bold}ERROR: supported options for --verifiable are 'true' or 'false'.${reset}"
                  exit 1
               fi
               shift 2
               ;;
           --sanity-tests)
               if [ "$2" = "true" ]; then
                  true "${cyan}INFO: Sanity tests true.${reset}"
               elif [ "$2" = "false" ]; then
                  ## TODO: opt in rather than opt out.
                  true "${cyan}INFO: Sanity tests false.${reset}"
                  export SKIP_SCRIPTS+=" 20_sanity_checks "
               else
                  echo "${red}${bold}ERROR: supported options for --sanity-tests are 'true' or 'false'.${reset}"
                  exit 1
               fi
               shift 2
               ;;
           --file-system)
               export whonix_build_file_system="$2"
               shift 2
               ;;
           --hostname)
               export whonix_build_hostname="$2"
               shift 2
               ;;
           --debopt)
               export whonix_build_debopt="$2"
               shift 2
               ;;
           --retry-max)
               export whonix_build_auto_retry="$2"
               shift 2
               ;;
           --retry-wait)
               export whonix_build_wait_auto_retry="$2"
               shift 2
               ;;
           --retry-before)
               export whonix_build_dispatch_before_retry="$2"
               shift 2
               ;;
           --retry-after)
               export whonix_build_dispatch_after_retry="$2"
               shift 2
               ;;
           --allow-untagged)
               if [ "$2" = "false" ]; then
                  true "${cyan}INFO: Would stop if building form untagged commits.${reset}"
               elif [ "$2" = "true" ]; then
                  true "${cyan}INFO: Would build form untagged commits.${reset}"
                  export whonix_build_ignore_untagged="true"
               else
                  echo "${red}${bold}ERROR: supported options for --allow-untagged are 'true' or 'false'.${reset}"
                  exit 1
               fi
               shift 2
               ;;
           --allow-uncommitted)
               if [ "$2" = "false" ]; then
                  true "${cyan}INFO: Would stop if uncommitted changes detected.${reset}"
               elif [ "$2" = "true" ]; then
                  true "${cyan}INFO: Would ignore if uncommitted changes detected.${reset}"
                  export whonix_build_ignore_uncommitted="true"
               else
                  echo "${red}${bold}ERROR: supported options for --allow-uncommitted are 'true' or 'false'.${reset}"
                  exit 1
               fi
               shift 2
               ;;
           --confdir)
               if [ "$2" = "" ]; then
                  echo "${red}${bold}ERROR: --confdir may not be empty.${reset}"
                  exit 1
               else
                  export whonix_build_custom_config_dir="$2"
                  true "${cyan}INFO: --confdir set to: $whonix_build_custom_config_dir${reset}"
                  if [ -d "$whonix_build_custom_config_dir" ]; then
                     true "${cyan}INFO: --confdir $whonix_build_custom_config_dir exists.${reset}"
                  else
                     echo "${red}${bold}ERROR: --confdir $whonix_build_custom_config_dir does not exist!${reset}"
                     exit 1
                  fi
               fi
               shift 2
               ;;
           --conffile)
               if [ "$2" = "" ]; then
                  echo "${red}${bold}ERROR: --conffile may not be empty.${reset}"
                  exit 1
               else
                  export whonix_build_conf_file="$2"
                  true "${cyan}INFO: --conffile set to: $whonix_build_conf_file${reset}"
                  if [ -f "$whonix_build_conf_file" ]; then
                     true "${cyan}INFO: --conffile $whonix_build_conf_file exists.${reset}"
                  else
                     echo "${red}${bold}ERROR: --conffile $whonix_build_conf_file does not exist!${reset}"
                     exit 1
                  fi
               fi
               shift 2
               ;;
           --grmlbin)
               if [ "$2" = "" ]; then
                  echo "${red}${bold}ERROR: --grmlbin may not be empty.${reset}"
                  exit 1
               else
                  export whonix_build_grml_bin="$2"
                  true "${cyan}INFO: --grmlbin set to: $whonix_build_grml_bin${reset}"
                  if [ -x "$whonix_build_grml_bin" ]; then
                     true "${cyan}INFO: --grmlbin $whonix_build_grml_bin exists.${reset}"
                  else
                     echo "${red}${bold}ERROR: --grmlbin $whonix_build_grml_bin is not executable!${reset}"
                     exit 1
                  fi
               fi
               shift 2
               ;;
           --tb)
               if [ "$2" = "" ]; then
                  echo "${red}${bold}ERROR: --tb may not be empty.${reset}"
                  exit 1
               else
                  export anon_shared_inst_tb="$2"
                  true "${cyan}INFO: --tb set to: $anon_shared_inst_tb${reset}"
               fi
               shift 2
               ;;
           --unsafe-io)
               if [ "$2" = "false" ]; then
                  true "${cyan}INFO: Not using unsafe io.${reset}"
               elif [ "$2" = "true" ]; then
                  whonix_build_unsafe_io="true"
                  export whonix_build_unsafe_io
                  true "${cyan}INFO: Using unsafe io.${reset}"
               else
                  echo "${red}${bold}ERROR: supported options for --unsafe-io are 'true' or 'false'.${reset}"
                  exit 1
               fi
               shift 2
               ;;
           --apparmor-pkg-only)
               export whonix_build_pkg_apparmor_only="true"
               shift
               ;;
           --repo)
               if [ "$2" = "false" ]; then
                  build_remote_repo_enable="false"
                  true "${cyan}INFO: will ${under}not${eunder} enable remote repository.${reset}"
               elif [ "$2" = "true" ]; then
                  build_remote_repo_enable="true"
                  true "${cyan}INFO: will ${under}enable${eunder} remote repository.${reset}"
               else
                  echo "${red}${bold}ERROR: supported options for --repo are 'true' or 'false'.${reset}"
                  exit 1
               fi
               export build_remote_repo_enable
               shift 2
               ;;
           --remote-derivative-packages)
               if [ "$2" = "false" ]; then
                  build_remote_derivative_pkgs="false"
                  true "${cyan}INFO: will ${under}not${eunder} use remote derivative packages.${reset}"
               elif [ "$2" = "true" ]; then
                  build_remote_derivative_pkgs="true"
                  true "${cyan}INFO: will ${under}use${eunder} remote derivative packages.${reset}"
               else
                  echo "${red}${bold}ERROR: supported options for --remote-derivative-packages are 'true' or 'false'.${reset}"
                  exit 1
               fi
               export build_remote_derivative_pkgs
               shift 2
               ;;
           --freedom)
               if [ "$2" = "false" ]; then
                  build_freedom_only="false"
                  true "${cyan}INFO: will include nonfreedom software packages.${reset}"
               elif [ "$2" = "true" ]; then
                  build_freedom_only="true"
                  true "${cyan}INFO: will include Freedom Software packages only.${reset}"
               else
                  echo "${red}${bold}ERROR: supported options for --freedom are 'true' or 'false'.${reset}"
                  exit 1
               fi
               export build_freedom_only
               shift 2
               ;;
           --function)
               if [ "$2" = "" ]; then
                  echo "${red}${bold}ERROR: --function may not be empty.${reset}"
                  exit 1
               else
                  FUNCTION="$2"
                  true "${cyan}INFO: --function set to $FUNCTION${reset}"
               fi
               shift 2
               ;;
           --)
               shift
               break
               ;;
           -*)
               echo "${red}${bold}unknown option (1): $1${reset}"
               error "${red}${bold}unknown option (1): $1${reset}"
               ;;
           *)
               if [ "$1" = "" ]; then
                  true
               else
                  echo "${red}${bold}unknown option (2): $1${reset}"
                  error "${red}${bold}unknown option (2): $1${reset}"
               fi
               break
               ;;
       esac
   done

   if [ "$BUILD_TARGET_ARCH" = "i386" ]; then
      [ -n "$BUILD_KERNEL_PKGS" ] || BUILD_KERNEL_PKGS="linux-image-686"
      [ -n "$BUILD_HEADER_PKGS" ] || BUILD_HEADER_PKGS="linux-headers-686"
   fi

   [ -n "$BUILD_TARGET_ARCH" ] || BUILD_TARGET_ARCH="amd64"
   [ -n "$BUILD_KERNEL_PKGS" ] || BUILD_KERNEL_PKGS="linux-image-amd64"
   [ -n "$BUILD_HEADER_PKGS" ] || BUILD_HEADER_PKGS="linux-headers-amd64"

   export BUILD_TARGET_ARCH
   export BUILD_KERNEL_PKGS
   export BUILD_HEADER_PKGS

   echo "${cyan}INFO: BUILD_TARGET_ARCH    (--arch): $BUILD_TARGET_ARCH${reset}"
   echo "${cyan}INFO: BUILD_KERNEL_PKGS  (--kernel): $BUILD_KERNEL_PKGS${reset}"
   echo "${cyan}INFO: BUILD_HEADER_PKGS (--headers): $BUILD_HEADER_PKGS${reset}"

   if [ "$whonix_build_sources_clearnet_or_onion" = "" ]; then
      echo "${cyan}${bold}INFO: No --connection type 'clearnet' or 'onion' has been chosen. \
Defaulting whonix_build_sources_clearnet_or_onion to ${under}clearnet${eunder}.
(Alternative value would be 'onion'.)${reset}"
      export whonix_build_sources_clearnet_or_onion="clearnet"
   fi

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.

   if [ ! "$WHONIX_BUILD_INTERNALRUN" = "1" ]; then
      if [ ! "$WHONIX_BUILD_ONE_SCRIPT_STARTED" = "1" ]; then
         if [ ! "$WHONIX_BUILD_BUILD" = "1" ] && [ ! "$WHONIX_BUILD_CLEAN" = "1" ]; then
            error "${red}${bold}You must either use --build or --clean.${reset}"
         fi
      fi
   fi

   if [ "$build_machines_counter" -gt "1" ]; then
      error "${red}${bold}You can not use --flavor multiples times!${reset}"
   fi

   if [ "$build_machines_counter" -le "0" ]; then
      if [ "$whonix_build_one_parsed" = "1" ]; then
         true
      elif [ "$WHONIX_BUILD_INTERNALRUN" = "1" ] ; then
         true
      else
         parse_cmd_flavor_error
      fi
   fi

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      true
   elif [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
      true
   elif [ "$WHONIX_BUILD_QCOW2" = "true" ]; then
      true
   elif [ "$WHONIX_BUILD_RAW" = "true" ]; then
      true
   elif [ "$WHONIX_BUILD_ISO" = "true" ]; then
      true
   else
      if [ "$WHONIX_BUILD_INTERNALRUN" = "1" ]; then
         true "INFO: allow running without --target since this is --internalrun."
      else
         parse_cmd_target_error
      fi
   fi

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      if [ "$build_target_counter" -gt "1" ]; then
         echo "${red}${bold}You can not combine --target root with other targets.${reset}"
         exit 1
      fi
   fi
}
