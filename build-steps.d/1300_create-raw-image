#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

source pre
source colors
source variables

create-debian-raw-image() {
   sudo $SUDO_OPTS mkdir --parents "$WHONIX_BINARY/"

   ## If whonix_build is run with --fast1 switch.
   if [ "$WHONIX_BUILD_FAST1" = "1" ]; then
      echo "${bold}${cyan}INFO: run with --fast 1 switch, skipping $BASH_SOURCE. ${reset}"
      exit 0
   fi

   ARCH="$(uname --machine)"
   true "${cyan}$BASH_SOURCE INFO: Architecture $ARCH detected.${reset}"
   true "${cyan}INFO: BUILD_TARGET_ARCH set to: $BUILD_TARGET_ARCH${reset}"

   mkdir --parents "/etc/debootstrap/etc/apt/"
   cp "$whonix_build_sources_list_primary" "/etc/debootstrap/etc/apt/sources.list"

   ## Info.
   true "${cyan}INFO: Using the following /etc/apt/sources.list for grml-debootstrap: ${reset}"
   cat "/etc/debootstrap/etc/apt/sources.list"

   ## TODO
   ## /etc/resolv.conf of host leaks into image.
   ## https://git-tails.immerda.ch/tails/plain/config/chroot_local-includes/etc/NetworkManager/dispatcher.d/00-resolv-over-clearnet
   ## configure_chroot_dns_servers

   ## {{ grml-debootstrap environment variables

   ## grml-debootstrap variables are documented in /etc/debootstrap/config and
   ## https://github.com/grml/grml-debootstrap/blob/master/config

   ## Using export, so grml-debootstrap can read it.

   [ -n "$DEBUG" ] || export DEBUG="true"

   ## https://github.com/grml/grml-debootstrap/issues/22
   ## https://github.com/grml/grml-debootstrap/pull/31
   [ -n "$REPORT_TRAP_ERR" ] || export REPORT_TRAP_ERR="yes"
   [ -n "$FAIL_TRAP_ERR" ] || export FAIL_TRAP_ERR="yes"

   [ -n "$DPKG_OPTIONS" ] || export DPKG_OPTIONS=${APTGETOPT[@]}

   ## Not using grml-debootstrap to install a kernel. A chroot-post.d script
   ## will take care of that.
   [ -n "$KERNEL" ] || export KERNEL="none"

   ## Do not install non-Free software.
   [ -n "$COMPONENTS" ] || export COMPONENTS='main'

   ## Integrity test.
   [ -n "$FSCK" ] || export FSCK='yes'

   ## Set time zone to UTC. Not that important, we will install our own
   ## /etc/timezone file later anyway. Just in case.
   [ -n "$TIMEZONE" ] || export TIMEZONE='UTC'

   ## Do not clean APT cache after installation is finished to safe time. We do
   ## this later in a chroot-post.d script.
   [ -n "$RM_APTCACHE" ] || export RM_APTCACHE='no'

   ## We do not need to upgrade the image, because when we create an image,
   ## we end up with the most current versions from the repository we are using
   ## anyway. We also do not install any other packages or use any other
   ## repositories, just use grml-debootstrap to create a minimal image.
   ## Would be also no good idea to rely on grml-debootstrap's upgrade
   ## function, because grml-debootstrap does not honor our apt options. (For
   ## higher network timeouts, ignore valid-until, since we are building from
   ## the frozen snapshot.debian.org repository. See also
   ## buildconfig-d/30_apt.conf.) https://github.com/grml/grml-debootstrap/issues/8
   ## Even if we wanted to upgrade the system, we'd be better off using our own
   ## build-step for that.
   [ -n "$UPGRADE_SYSTEM" ] || export UPGRADE_SYSTEM='no'

   ## Use fixed disk identifier. For verifiable builds.
   ## grml-debootstrap sets it to:
   ## 26ada0c0-1165-4098-884d-aafd2220c2c6
   [ -n "$FIXED_DISK_IDENTIFIERS" ] || export FIXED_DISK_IDENTIFIERS='yes'

   ## We later install a kernel ourselves.
   [ -n "$NOKERNEL" ] || export NOKERNEL="true"

   ## Do not use /etc/network/interfaces by grml-debootstrap.
   [ -n "$NOINTERFACES" ] || export NOINTERFACES="true"

   mmdebstrap_wrapper="$WHONIX_SOURCE_FOLDER/help-steps/pbuilder-debootstrap-command-filter"

   if [ "$WHONIX_BUILD_FLAVOR" = "whonix-gateway-rpi" ]; then
      ## We assume cross building on "amd64" (Intel and AMD) for "arm64" for RPi builds.
      ## It would be safer to build on "arm64" because then it may be possible
      ## to use mmdebstrap, which is more secure (and faster).
      [ -n "$DEBOOTSTRAP" ] || export DEBOOTSTRAP='qemu-debootstrap'
      [ -n "$GRUB_INSTALL" ] || export GRUB_INSTALL='no'
   else
      [ -n "$DEBOOTSTRAP" ] || export DEBOOTSTRAP="$mmdebstrap_wrapper"
   fi

   if [ "$DEBOOTSTRAP" = "$mmdebstrap_wrapper" ]; then
      ## Using a sources.list probably only with mmdebstrap.
      [ -n "$MIRROR" ] || export MIRROR="$whonix_build_sources_list_primary"
   else
      ## qemu-debootstrap:
      ## - cannot be combined with mmdebstrap.
      ## - cannot bootstrap from multiple (regular and security) repositories
      ##   at the same time.
      ## - does not support apt sources in a sources.list file such as for example
      ##   build_sources/debian_stable_current_clearnet.list
      ##   (variable: whonix_build_sources_list_primary)
      ##   but requires a apt URI such as for example.
      ##   http://HTTPS///deb.debian.org/debian
      ##   (variable: whonix_build_apt_sources_mirror)
      [ -n "$MIRROR" ] || export MIRROR="$whonix_build_apt_sources_mirror"
   fi

   ## See also /etc/debootstrap/config or
   ## https://github.com/grml/grml-debootstrap/blob/master/config to learn
   ## about other grml-debootstrap options and defaults.

   ## Using '--packages "$WHONIX_SOURCE_FOLDER/grml_packages"' even though
   ## these packages are already passed by '--depopt "--include=,[...]" to
   ## avoid grml-debootstrap apt-get installing its default package selection.
   ## (Which contains grml distribution default packages that we don't need in
   ## Whonix.)

   ## whonix_build_multiarch_package_item is read by pbuilder-debootstrap-command-filter.

   $DEBOOTSTRAP_PREFIX \
   SOURCE_DATE_EPOCH="$SOURCE_DATE_EPOCH" \
   whonix_build_multiarch_package_item="$BUILD_TARGET_ARCH" \
      bash -x \
         "$whonix_build_grml_bin" \
            --debopt "$whonix_build_debopt" \
            --arch "$BUILD_TARGET_ARCH" \
            --filesystem "$whonix_build_file_system" \
            --force \
            --hostname "$whonix_build_hostname" \
            --nopassword \
            --release "$whonix_build_apt_stable_release" \
            --keep_src_list \
            --verbose \
            --vmfile \
            --vmsize "$VMSIZE" \
            --packages "$WHONIX_SOURCE_FOLDER/grml_packages" \
            --target "$binary_image_raw"
}

create-empty-raw-image() {
   qemu-img create -f raw "$binary_image_raw" "$VMSIZE"
}

permission-fix-raw-image() {
   chown "$user_name:$user_name" "$binary_image_raw"
}

main() {
   root_check
   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      true "${green}INFO: Skipping $BASH_SOURCE, because ANON_BUILD_INSTALL_TO_ROOT is set to 1.${reset}"
   else
      if [ "$WHONIX_BUILD_TYPE" = "custom-workstation" ]; then
         create-empty-raw-image
      elif [ "$WHONIX_BUILD_TYPE" = "gateway" ]; then
         create-debian-raw-image
      elif [ "$WHONIX_BUILD_TYPE" = "workstation" ]; then
         create-debian-raw-image
      elif [ "$WHONIX_BUILD_TYPE" = "whonix-host" ]; then
         create-debian-raw-image
      elif [ "$WHONIX_BUILD_TYPE" = "kicksecure" ]; then
         create-debian-raw-image
      else
         error "ERROR: Invalid WHONIX_BUILD_FLAVOR $WHONIX_BUILD_FLAVOR (WHONIX_BUILD_TYPE: $WHONIX_BUILD_TYPE). Please report this bug!"
      fi
   fi
   permission-fix-raw-image
}

main "$@"
