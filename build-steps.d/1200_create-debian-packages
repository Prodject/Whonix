#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## example usage:
## TODO: always check packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list first!
##
## sudo -E ./build-steps.d/1200_create-debian-packages --build --allow-untagged true --allow-uncommitted true --internalrun --target root --function download_tpo_packages
##
## sudo -E ./build-steps.d/1200_create-debian-packages --build --allow-untagged true --allow-uncommitted true --internalrun --target virtualbox --function download_virtualbox_packages

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

VMNAME="internalrun"

source pre
source colors
source variables

cd "$MYDIR"
cd ..

download_tpo_packages() {
   whonix_build_special_packages_chroot_script="$WHONIX_SOURCE_HELP_STEPS_FOLDER/cowbuilder_repo_download_chroot_script"
   repo_signing_key="$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/usr/share/anon-shared-build-apt-sources-tpo/tpoarchive-keys.d/torprojectarchive.asc"
   repo_sources_list="$whonix_build_sources_list_torproject"
   temp_newer_packages="$WHONIX_BINARY/temp_packages_tpo"
   export download_source_package="true"

   ## Selected packages we want to mirror from deb.torproject.org to Whonix local/remote repository.
   newer_package_list="tor tor-geoipdb deb.torproject.org-keyring"

   get_newer_packages "$@"
}

download_virtualbox_packages() {
   if [ ! "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
      true "${green}INFO: Skipping $FUNCNAME, because WHONIX_BUILD_VIRTUALBOX is not set to 'true'.${reset}"
      return 0
   fi

   whonix_build_special_packages_chroot_script="$WHONIX_SOURCE_HELP_STEPS_FOLDER/cowbuilder_repo_download_chroot_script"
   repo_signing_key="$WHONIX_SOURCE_FOLDER/build_sources/lucas_nussbaum.asc"
   repo_sources_list="$WHONIX_SOURCE_FOLDER/build_sources/debian_buster_backport_virtualbox_lucas_nussbaum.list"
   temp_newer_packages="$WHONIX_BINARY/temp_packages_virtualbox"
   ## Not available from that repository but from Debian directly.
   export download_source_package="false"

   ## Selected packages we want to mirror from repo_sources_list to Whonix local/remote repository.
   newer_package_list="virtualbox virtualbox-dkms virtualbox-guest-dkms virtualbox-guest-source virtualbox-guest-utils virtualbox-guest-x11 virtualbox-qt virtualbox-source"

   ## non-essential and not available packages from the repository we are using:
   ## virtualbox-ext-pack
   ## virtualbox-guest-additions-iso

   get_newer_packages "$@"
}

## Not in use by default.
## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=942873
## https://salsa.debian.org/fasttrack-team/support/issues/10
compile_virtualbox_packages() {
   if [ ! "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
      true "${green}INFO: Skipping $FUNCNAME, because WHONIX_BUILD_VIRTUALBOX is not set to 'true'.${reset}"
      return 0
   fi

   whonix_build_special_packages_chroot_script="$WHONIX_SOURCE_HELP_STEPS_FOLDER/cowbuilder_build_virtualbox_chroot_script"
   repo_signing_key="none"
   repo_sources_list="$whonix_build_sources_list_debian_sid"
   temp_newer_packages="$WHONIX_BINARY/temp_packages_virtualbox"
   ## Doing this anyway.
   #export download_source_package="false"

   ## Selected packages we want to mirror from repo_sources_list to Whonix local/remote repository.
   newer_package_list="virtualbox virtualbox-dkms virtualbox-guest-dkms virtualbox-guest-source virtualbox-guest-utils virtualbox-guest-x11 virtualbox-qt virtualbox-source"

   ## non-essential and not available packages from the repository we are using:
   ## virtualbox-ext-pack
   ## virtualbox-guest-additions-iso

   get_newer_packages "$@"
}

get_newer_packages() {
   if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
      true "${cyan}$BASH_SOURCE INFO: Skipping $FUNCNAME, because whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only. ${reset}"
      return 0
   fi

   rm --recursive --force "$temp_newer_packages"
   sudo $SUDO_OPTS mkdir --parents "$temp_newer_packages"

   for whonix_build_multiarch_package_item in $make_cross_build_platform_list ; do
      export whonix_build_multiarch_package_item

      ## TODO: change that folder
      cow_folder="/var/cache/pbuilder/cow.cow_${whonix_build_multiarch_package_item}"
      base_folder="/var/cache/pbuilder/base.cow_${whonix_build_multiarch_package_item}"

      test -d "$base_folder"
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER/umount_kill.sh" "$base_folder/"

      sudo $SUDO_OPTS mkdir -p "$base_folder/tmp/temporary-repository"

      if [ "$repo_signing_key" = "none" ]; then
         rm -f "$base_folder/tmp/temporary-repository/repo_signing_key.asc"
      else
         cp "$repo_signing_key" "$base_folder/tmp/temporary-repository/repo_signing_key.asc"
      fi

      if [ "$repo_sources_list" = "none" ]; then
         rm -f "$base_folder/tmp/temporary-repository/newer.list"
      else
         cp "$repo_sources_list" "$base_folder/tmp/temporary-repository/newer.list"
      fi

      cp "$whonix_build_pbuilder_config_file" "$base_folder/tmp/"

      cowbuilder_exit_code=0
      $COWBUILDER_PREFIX \
      newer_package_list="$newer_package_list" \
      temp_newer_packages="$temp_newer_packages" \
         cowbuilder \
            --host-arch "$host_architecture" \
            --architecture "$BUILD_TARGET_ARCH" \
            --configfile "$whonix_build_pbuilder_config_file" \
            --execute "$whonix_build_special_packages_chroot_script" \
            --basepath "$base_folder" \
            --buildplace "$cow_folder" \
            --bindmounts "$temp_newer_packages" \
            || { cowbuilder_exit_code="$?" ; true; };

      if [ -d "$base_folder" ]; then
         "$WHONIX_SOURCE_HELP_STEPS_FOLDER/umount_kill.sh" "$base_folder/"
      fi

      if [ ! "$cowbuilder_exit_code" = "0" ]; then
         return "$cowbuilder_exit_code"
      fi
   done

   local file_name package_absolute_path

   for file_name in "$temp_newer_packages/"*".deb" ; do
      package_absolute_path="$(readlink -f "$file_name")"
      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" includedeb "$WHONIX_BUILD_APT_CODENAME" "$package_absolute_path"
   done

   for file_name in "$temp_newer_packages/"*".dsc" ; do
      package_absolute_path="$(readlink -f "$file_name")"
      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" includedsc "$WHONIX_BUILD_APT_CODENAME" "$package_absolute_path"
   done

   true "${cyan}$BASH_SOURCE INFO: Got newer packages. ${reset}"
}

create_whonix_debian_packages() {
   true "${cyan}$BASH_SOURCE INFO: Creating Whonix Debian Packages... ${reset}"

   local number_folders_total number_folder_current benchmark_time_start benchmark_took_time
   ## Thanks to: l0b0 - http://unix.stackexchange.com/a/20855/49297
   number_folders_total="$(find "$WHONIX_SOURCE_FOLDER/packages" -mindepth 1 -maxdepth 1 -type d -printf '\n' | wc -l)" || true
   number_folder_current="0"

   shopt -s nullglob
   shopt -s dotglob

   for item in $pkg_list; do
      item="$WHONIX_SOURCE_FOLDER/packages/$item"
      if [ ! -d "$item" ]; then
         true "INFO: Not a folder: $item"
         continue
      fi
      pushd "$item"
      number_folder_current="$(( number_folder_current + 1 ))"
      local base_name
      base_name="${item##*/}"
      if [ "$base_name" = "whonix-developer-meta-files" ]; then
         true "${cyan}INFO: Skipping $base_name as expected.${reset}"
         popd
         continue
      fi
      if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
         if [ "$(echo "$base_name" | grep "apparmor-profile-")" ]; then
            true "${cyan}INFO: Building apparmor profile: $base_name ${reset}"
         else
            true "${cyan}INFO${reset}: Skipping $base_name as expected because using whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only."
            popd
            continue
         fi
      fi
      true "${cyan}INFO: Will build now package ($number_folder_current / $number_folders_total): $base_name ${reset}"
      benchmark_time_start="$(date +%s)" || true
      lintian_use_maybe="$make_use_lintian"
      ## Using -E so environment variables make_use_lintian, make_use_cowbuilder, WHONIX_BUILD_APT_CODENAME gets passed.
      sudo $SUDO_OPTS -E /usr/share/genmkfile/make-helper.bsh reprepro-remove
      /usr/share/genmkfile/make-helper.bsh deb-cleanup
      sudo $SUDO_OPTS -E /usr/share/genmkfile/make-helper.bsh deb-pkg
      sudo $SUDO_OPTS -E /usr/share/genmkfile/make-helper.bsh reprepro-add
      benchmark_took_time="$(benchmarktimeend "$benchmark_time_start")" || true
      popd
      true "${cyan}INFO: Done with build of package ($number_folder_current / $number_folders_total) (benchmark: $benchmark_took_time): $base_name ${reset}"
   done

   true "${cyan}$BASH_SOURCE INFO: Created Whonix Debian Packages. ${reset}"
}

create-debian-packages() {
   if [ "$WHONIX_BUILD_APT_CODENAME" = "" ]; then
      error "Variable WHONIX_BUILD_APT_CODENAME is empty!"
   fi
   true "${cyan}$BASH_SOURCE INFO: Going to update ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository... ${reset}"
   sleep 3

   if [ ! "$FUNCTION" = "" ]; then
      eval $FUNCTION
      return 0
   fi

   download_virtualbox_packages "$@"
   download_tpo_packages "$@"
   create_whonix_debian_packages "$@"
}

main() {
   root_check "$@"
   if [ "$WHONIX_BUILD_FLAVOR" = "whonix-custom-workstation" ]; then
      true "${cyan}INFO: Skipping creation of packages for custom workstation.${reset}"
   elif [ "$build_remote_derivative_pkgs" = "true" ]; then
      true "${cyan}INFO: build_remote_derivative_pkgs is set to $build_remote_derivative_pkgs, skipping creation of packages.${reset}"
   else
      create-debian-packages "$@"
   fi
}

main "$@"
