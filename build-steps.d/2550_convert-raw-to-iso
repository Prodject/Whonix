#!/bin/bash

## Copyright (C) 2019 - 2019 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

source pre
source colors
source variables

create_environment(){
   errorhandlersetup "errorhandlerunchrootunpreventunmount" ERR INT TERM

   mkdir -p "$WHONIX_BINARY/image/"{live,isolinux}
   mkdir -p "$WHONIX_BINARY/image/"{boot/isolinux,EFI/boot}
   mkdir -p "$WHONIX_BINARY/image/boot/grub"

   cp /usr/lib/ISOLINUX/isolinux.bin "$WHONIX_BINARY/image/boot/isolinux/"
   cp /usr/lib/syslinux/modules/bios/* "$WHONIX_BINARY/image/boot/isolinux/"
}

create_squashfs_ok(){
   errorhandlersetup "errorhandlerunchrootunpreventunmount" ERR INT TERM

   cd "$WHONIX_BINARY"
   sudo mksquashfs \
      "$CHROOT_FOLDER" \
      image/live/filesystem.squashfs \
      -comp xz
}

copy_files(){
   errorhandlersetup "errorhandlerunchrootunpreventunmount" ERR INT TERM

   ## we copy the kernel and the initrd
   ## better to use variables than '*'!

   cp "$CHROOT_FOLDER"/boot/vmlinuz-* "$WHONIX_BINARY/image/live/vmlinuz"
   cp "$CHROOT_FOLDER"/boot/initrd.img-* "$WHONIX_BINARY/image/live/initrd"

   cp /usr/lib/ISOLINUX/isolinux.bin "$WHONIX_BINARY/image/isolinux/"
   cp /usr/lib/syslinux/modules/bios/menu.c32 "$WHONIX_BINARY/image/isolinux/"
   cp /usr/lib/syslinux/modules/bios/hdt.c32 "$WHONIX_BINARY/image/isolinux/"
   cp /usr/lib/syslinux/modules/bios/ldlinux.c32 "$WHONIX_BINARY/image/isolinux/"
   cp /usr/lib/syslinux/modules/bios/libutil.c32 "$WHONIX_BINARY/image/isolinux/"
   cp /usr/lib/syslinux/modules/bios/libmenu.c32 "$WHONIX_BINARY/image/isolinux/"
   cp /usr/lib/syslinux/modules/bios/libcom32.c32 "$WHONIX_BINARY/image/isolinux/"
   cp /usr/lib/syslinux/modules/bios/libgpl.c32 "$WHONIX_BINARY/image/isolinux/"
   cp /usr/share/misc/pci.ids "$WHONIX_BINARY/image/isolinux/"
   cp /boot/memtest86+.bin "$WHONIX_BINARY/image/live/memtest"

   cp "$WHONIX_SOURCE_FOLDER/iso/grub-embedded.cfg" "$WHONIX_BINARY/image/grub-embedded.cfg"

   cd /usr/lib/grub
   grub-mkimage \
      --config "$WHONIX_BINARY/image/grub-embedded.cfg" \
      --format=x86_64-efi \
      --prefix "" \
      --output="$WHONIX_BINARY/image/EFI/boot/bootx64.efi" \
      --compression=xz \
      linux \
      normal \
      iso9660 \
      efi_uga \
      efi_gop \
      fat \
      chain \
      disk \
      exfat \
      usb \
      multiboot \
      msdospart \
      part_msdos \
      part_gpt \
      search \
      part_gpt \
      configfile \
      ext2 \
      boot

   cd "$WHONIX_BINARY/image/EFI"
   dd if=/dev/zero of="$WHONIX_BINARY/image/EFI/efiboot.img" bs=1M count=100
   mkfs.vfat "$WHONIX_BINARY/image/EFI/efiboot.img"
   mmd -i "$WHONIX_BINARY/image/EFI/efiboot.img" efi efi/boot efi/boot/grub
   mcopy -i "$WHONIX_BINARY/image/EFI/efiboot.img" boot/bootx64.efi ::efi/boot/

   ## isolinux bootloader configuration
   ## here I append live-config.user-default-groups=libvirt,kvm to the boot parameter so that the Debian Live User is only a member of libvirt and kvm groups
   ## (default is: audio cdrom dip floppy video plugdev netdev powerdev scanner bluetooth)
   ## in a previous version I also appended other boot parameters used in the default hardened debian VM live-mode, except 'plainboot'
   ## parameter which prevented from mounting the filesystem (slab_nomerge slab_debug=FZP page_poison=1 mce=0 boot=live
   ## union=overlay ip=frommedia noeject nopersistence). I have removed them for the time being since at least one of them
   ## prevented the install target to be bootable. Needs more testing.

   cp "$WHONIX_SOURCE_FOLDER/iso/isolinux.cfg" "$WHONIX_BINARY/image/boot/isolinux/isolinux.cfg"
   cp "$WHONIX_SOURCE_FOLDER/iso/grub.cfg" "$WHONIX_BINARY/image/boot/grub/grub.cfg"
}

create_iso(){
   errorhandlersetup "errorhandlerunchrootunpreventunmount" ERR INT TERM

   xorriso \
      -as mkisofs \
      -iso-level 3 \
      -full-iso9660-filenames \
      -volid "Whonix Desktop Live" \
      -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
      -eltorito-boot \
         boot/isolinux/isolinux.bin \
         -no-emul-boot -boot-load-size 4 -boot-info-table \
         --eltorito-catalog boot/isolinux/isolinux.cat \
      -eltorito-alt-boot \
         -e EFI/efiboot.img \
         -no-emul-boot -isohybrid-gpt-basdat \
      -output "$binary_image_iso" \
      "$WHONIX_BINARY/image"
}

main() {
   errorhandlersetup "errorhandlerunchrootunpreventunmount" ERR INT TERM

   if [ "$WHONIX_BUILD_ISO" = "true" ]; then
      true
   else
      true "${green}INFO: Skipping $BASH_SOURCE, because WHONIX_BUILD_ISO is not set to 'true'.${reset}"
      exit 0
   fi

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/mount-raw"
   create_environment
   create_squashfs_ok
   copy_files
   create_iso
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/unmount-raw"
}

main "$@"
